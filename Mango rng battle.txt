<title>Mango Battle Arena</title> <style> :root { --main: #111; --main-light: #222; --accent: #fff; --accent2: #bbb; --highlight: #fff; --error: #f33; --rainbow: linear-gradient(90deg, #ff005a, #ffb700, #39ff14, #00d2ff, #8000ff, #ff005a); } html, body { min-height: 100vh; background: var(--main); color: var(--accent); font-family: 'Roboto', Arial, sans-serif; margin: 0; padding: 0; } .container { max-width: 900px; margin: 0 auto; background: var(--main-light); box-shadow: 0 0 40px #0007; border-radius: 20px; padding: 32px; margin-top: 32px; } h1 { font-size: 2.8em; text-align: center; margin-bottom: 10px; letter-spacing: 2px; color: var(--accent); } .divine { background: var(--rainbow); background-clip: text; -webkit-background-clip: text; color: transparent; -webkit-text-fill-color: transparent; font-weight: bold; } .tabs { display: flex; gap: 8px; margin-bottom: 18px; justify-content: center; } .tab { flex: 1; background: var(--main-light); color: var(--accent2); border: none; font-size: 1.2em; padding: 14px 0; cursor: pointer; border-radius: 12px 12px 0 0; border-bottom: 3px solid transparent; transition: all 0.18s; letter-spacing: 1px; } .tab.active { color: var(--highlight); border-bottom: 3px solid var(--highlight); background: var(--main); font-weight: bold; } .section { display:none; } .section.active { display:block; animation:fadeIn 0.3s; } @keyframes fadeIn { from{opacity:0;transform:translateY(20px);} to{opacity:1;transform:translateY(0);} } .btn { background: var(--main); color: var(--highlight); font-size: 1em; border: 2px solid var(--accent); border-radius: 8px; padding: 10px 22px; margin: 8px 0; cursor: pointer; font-weight: bold; transition: all 0.16s; letter-spacing: 1px; } .btn:hover { background: var(--highlight); color: var(--main); border-color: var(--highlight); } .btn-danger { border-color: var(--error); color: var(--error); } .btn-rebirth { border-color: #39ff14; color: #39ff14; background: #222; } .input-group { margin-bottom: 18px; } label { display: block; margin-bottom: 6px; color: var(--accent2); } input[type="text"] { background: var(--main-light); color: var(--accent); border: 2px solid var(--accent2); border-radius: 7px; font-size: 1.1em; padding: 8px 12px; width: 100%; margin-bottom: 8px; } .mango-list { display: grid; grid-template-columns: repeat(auto-fit, minmax(210px, 1fr)); gap: 15px; margin: 18px 0; } .mango-card { background: #181818; border: 2px solid #fff1; border-radius: 12px; padding: 14px; color: var(--accent); box-shadow: 0 2px 12px #0005; transition: box-shadow 0.2s, border-color 0.2s; cursor: pointer; } .mango-card.selected { border-color: var(--highlight); box-shadow: 0 0 20px #fff1; } .mango-rare { font-size: 0.9em; color: var(--accent2); font-weight: bold; letter-spacing: 1px; } .offline-list, .online-list { max-height: 260px; overflow-y: auto; background: #191919; border-radius: 8px; padding: 10px; margin-bottom: 8px; border: 1px solid #fff2; } .enemy, .online-player { border-bottom: 1px solid #fff1; padding: 7px 0; cursor: pointer; display: flex; align-items: center; justify-content: space-between; } .enemy:last-child, .online-player:last-child { border-bottom: none; } .enemy:hover, .online-player:hover { background: #222; } .level { font-weight: bold; padding: 3px 10px; border-radius: 5px; background: #222; color: #999; font-size: 0.9em; } .level.max { background: var(--rainbow); color: transparent; -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent;} .notification { position: fixed; top: 0; left: 0; right: 0; background: #fff; color: #111; font-weight: bold; font-size: 1.2em; padding: 18px; border-bottom: 3px solid #111; box-shadow: 0 2px 24px #0005; z-index: 1000; display: flex; justify-content: center; align-items: center; gap: 30px; } .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 16px; margin: 24px 0; } .stat-card { background: #181818; border-radius: 10px; padding: 18px; text-align: center; border: 2px solid #fff1; box-shadow: 0 2px 12px #0005; } .stat-card h3 { margin-bottom: 8px; color: var(--accent2);} .stat-card .value { font-size: 2em; font-weight: bold; color: var(--highlight);} .mt-20 { margin-top: 20px; } .mb-20 { margin-bottom: 20px; } .center { text-align: center; } .plum-list { display: flex; flex-wrap: wrap; gap: 7px; margin: 10px 0; } .plum { background: #fff; color: #111; border-radius: 6px; padding: 4px 12px; font-weight: bold; font-size: 1em; border: 1px solid #333; margin: 2px; } /* Scrollbar styling */ ::-webkit-scrollbar { width: 8px; background: #222; } ::-webkit-scrollbar-thumb { background: #444; border-radius: 7px;} </style>
ðŸ¥­ MANGO BATTLE ARENA ðŸ¥­
Welcome, Fighter!
Enter your fighter name:
Enter Arena
Roll Mangoes Inventory Offline Mode Online Mode Stats
Roll 1,000,000 Unique Mangoes!
ðŸŽ² Roll Mango
Your Mango Collection
Offline Battles
Fight against 10,000 AI fighters!

Online Players
Challenge anyone in the arena!

Your Statistics
Mangoes Rolled
0
Mangoes Owned
0
Battles Won
0
Battles Lost
0
Level
Rebirth Stage
0
Reset Progress Rebirth
<script> // --- DATA --- const rarities = Array.from({length:100}, (_,i) => ({ name: i===99 ? "ðŸª½DIVINEðŸª½" : "Rarity "+(i+1), color: i===99 ? "rainbow" : "#fff", index: i })); const mangoVarieties = Array.from({length:1000000}, (_,i) => ({ id: i+1, name: "Mango #" + (i+1), rarity: Math.floor(i/(1000000/100)), // Divide mangoes among 100 rarities stats: { str: Math.floor(Math.random()*100) + (i%100), def: Math.floor(Math.random()*100) + (i%87), spd: Math.floor(Math.random()*100) + (i%91), luck: Math.floor(Math.random()*100) + (i%73) } })); const offlineEnemies = Array.from({length:10000}, (_,i) => ({ name: "Bot_" + (i+1), level: Math.floor(Math.random()*100)+1, rarity: Math.floor(Math.random()*100) })); // Simulate online players let onlinePlayers = Array.from({length:40}, (_,i) => ({ name: "Player_" + (i+1), level: Math.floor(Math.random()*100)+1, rarity: Math.floor(Math.random()*100) }));
// --- GAME STATE ---
let player = {
  name: "",
  mangoes: [],
  equipped: null,
  rolled: 0,
  owned: 0,
  won: 0,
  lost: 0,
  rebirth: 0,
  level: 1,
  plums: [],
  notifications: [],
};

// --- GUI LOGIC ---
function switchTab(tab) {
  document.querySelectorAll('.tab').forEach(btn =>
    btn.classList.toggle('active', btn.dataset.tab === tab));
  document.querySelectorAll('.section').forEach(sec =>
    sec.classList.toggle('active', sec.id === tab));
  if(tab==="inventory") renderInventory();
  if(tab==="offline") renderOfflineList();
  if(tab==="online") renderOnlineList();
  if(tab==="stats") renderStats();
}
document.querySelectorAll('.tab').forEach(btn =>
  btn.addEventListener('click', e => switchTab(btn.dataset.tab)));

function startGame() {
  const name = document.getElementById('player-name').value.trim();
  if (!name) { alert("Please enter a name!"); return; }
  player.name = name;
  document.getElementById('login-section').style.display = "none";
  document.getElementById('game-section').style.display = "";
  renderStats();
  renderInventory();
}

// --- MANGO ROLLING ---
function rollMango() {
  const idx = Math.floor(Math.random()*mangoVarieties.length);
  const mango = mangoVarieties[idx];
  mango.ownedId = Date.now()+Math.random();
  player.mangoes.push(mango);
  player.rolled++;
  player.owned++;
  renderRollResult(mango);
  renderStats();
  renderInventory();
}
function renderRollResult(mango) {
  const rarity = rarities[mango.rarity];
  document.getElementById('roll-result').innerHTML = `
    <div class="mango-card selected">
      <h3>${mango.name}</h3>
      <div class="mango-rare">${rarity.index===99
        ? `<span class="divine">${rarity.name}</span>` : rarity.name}</div>
      <div>STR: ${mango.stats.str} DEF: ${mango.stats.def} SPD: ${mango.stats.spd} LUCK: ${mango.stats.luck}</div>
      <button class="btn" onclick="equipMango('${mango.ownedId}')">Equip</button>
    </div>`;
}

// --- INVENTORY ---
function renderInventory() {
  const search = (document.getElementById('search-mango')?.value||"").toLowerCase();
  const filtered = player.mangoes.filter(m =>
    m.name.toLowerCase().includes(search) ||
    rarities[m.rarity].name.toLowerCase().includes(search));
  document.getElementById('inventory-list').innerHTML = filtered.length
    ? filtered.map(m => {
      const rarity = rarities[m.rarity];
      return `<div class="mango-card${player.equipped===m.ownedId?' selected':''}">
        <h3>${m.name}</h3>
        <div class="mango-rare">${rarity.index===99
          ? `<span class="divine">${rarity.name}</span>` : rarity.name}</div>
        <div>STR: ${m.stats.str} DEF: ${m.stats.def} SPD: ${m.stats.spd} LUCK: ${m.stats.luck}</div>
        <button class="btn" onclick="equipMango('${m.ownedId}')">
          ${player.equipped===m.ownedId?'Equipped':'Equip'}</button>
      </div>`;
    }).join("")
    : `<div class="center">No mangoes collected yet. Start rolling!</div>`;
}
function equipMango(id) {
  player.equipped = id;
  renderInventory();
  renderStats();
}

// --- OFFLINE MODE ---
function renderOfflineList() {
  document.getElementById('offline-list').innerHTML = offlineEnemies.slice(0,200).map(enemy =>
    `<div class="enemy" onclick="battleOffline('${enemy.name}')">
      <span>${enemy.name}</span>
      <span class="level${enemy.level===100?' max':''}">${enemy.level===100?'<span class="divine">ðŸª½DIVINEðŸª½</span>':enemy.level}</span>
    </div>`).join("");
}
function battleOffline(enemyName) {
  const enemy = offlineEnemies.find(e=>e.name===enemyName);
  if (!player.equipped) { alert("Equip a mango first!"); return; }
  const playerMango = player.mangoes.find(m=>m.ownedId===player.equipped);
  const playerPower = player.level * playerMango.stats.str * 2 + playerMango.stats.def + playerMango.stats.spd + playerMango.stats.luck;
  const enemyPower = enemy.level * 100 + Math.floor(Math.random()*500);
  const win = playerPower > enemyPower;
  if(win) player.won++; else player.lost++;
  if(win && Math.random()<0.05) player.plums.push(randomPlum());
  document.getElementById('offline-battle').innerHTML = `
    <div class="center mt-20">
      <h3>${win ? "Victory!" : "Defeat!"}</h3>
      <p>You: Level ${player.level} | Power ${playerPower} <br>
         Enemy: Level ${enemy.level} | Power ${enemyPower}</p>
      ${win ? "<p>You won a plum!</p>":""}
    </div>
  `;
  renderStats();
}
function randomPlum() {
  const rarity = rarities[Math.floor(Math.random()*100)].name;
  return {rarity};
}

// --- ONLINE MODE ---
function renderOnlineList() {
  document.getElementById('online-list').innerHTML = onlinePlayers.map(op =>
    `<div class="online-player" onclick="challengePlayer('${op.name}')">
      <span>${op.name}</span>
      <span class="level${op.level===100?' max':''}">${op.level===100?'<span class="divine">ðŸª½DIVINEðŸª½</span>':op.level}</span>
    </div>`).join("");
}
function challengePlayer(name) {
  showNotification(`${name} has challenged you!`, ()=>{
    battleOnline(name);
  });
}
function showNotification(msg, acceptCallback) {
  const n = document.getElementById('notification');
  n.innerHTML = `
    <span>${msg}</span>
    <button class="btn" onclick="acceptChallenge()">Accept</button>
    <button class="btn btn-danger" onclick="closeNotification()">Decline</button>
  `;
  n.style.display = "";
  window.acceptChallenge = ()=>{
    n.style.display="none";
    if(acceptCallback) acceptCallback();
  }
  window.closeNotification = ()=>{ n.style.display="none";}
}
function battleOnline(name) {
  const op = onlinePlayers.find(p=>p.name===name);
  if (!player.equipped) { alert("Equip a mango first!"); return; }
  const playerMango = player.mangoes.find(m=>m.ownedId===player.equipped);
  const playerPower = player.level * playerMango.stats.str * 2 + playerMango.stats.def + playerMango.stats.spd + playerMango.stats.luck;
  const opPower = op.level * 100 + Math.floor(Math.random()*1000);
  const win = playerPower > opPower;
  if(win) player.won++; else player.lost++;
  if(win && Math.random()<0.03) player.plums.push(randomPlum());
  document.getElementById('online-battle').innerHTML = `
    <div class="center mt-20">
      <h3>${win ? "Victory!" : "Defeat!"}</h3>
      <p>You: Level ${player.level} | Power ${playerPower}<br>
         Opponent: Level ${op.level} | Power ${opPower}</p>
      ${win ? "<p>You won a plum!</p>":""}
    </div>
  `;
  renderStats();
}

// --- STATS, REBIRTH, RESET ---
function renderStats() {
  document.getElementById('stat-rolled').textContent = player.rolled;
  document.getElementById('stat-owned').textContent = player.owned;
  document.getElementById('stat-won').textContent = player.won;
  document.getElementById('stat-lost').textContent = player.lost;
  let displayLevel = player.level===100 ? 
    `<span class="divine">ðŸª½DIVINEðŸª½</span>` : player.level;
  document.getElementById('stat-level').innerHTML = displayLevel;
  document.getElementById('stat-rebirth').textContent = player.rebirth;
  document.getElementById('plum-list').innerHTML = player.plums.map((p,i)=>`<span class="plum">${p.rarity} Plum</span>`).join("");
}
function resetProgress() {
  if(confirm("Are you sure you want to reset all progress?")) {
    player = {
      name: player.name,
      mangoes: [],
      equipped: null,
      rolled: 0,
      owned: 0,
      won: 0,
      lost: 0,
      rebirth: 0,
      level: 1,
      plums: [],
      notifications: [],
    };
    renderStats();
    renderInventory();
    document.getElementById('offline-battle').innerHTML = "";
    document.getElementById('online-battle').innerHTML = "";
    document.getElementById('roll-result').innerHTML = "";
  }
}
function rebirth() {
  if(player.plums.length<5) {
    alert("You need 5 plums to rebirth!");
    return;
  }
  if(player.rebirth>=100) {
    alert("You have reached max rebirth stage!");
    return;
  }
  player.rebirth++;
  player.level = Math.min(100, player.level+1);
  player.plums.splice(0,5);
  alert("Rebirth successful! Level increased.");
  renderStats();
}
// --- INIT ---
window.rollMango = rollMango;
window.equipMango = equipMango;
window.resetProgress = resetProgress;
window.rebirth = rebirth;
window.filterInventory = renderInventory;
// Initial tab
switchTab("roll");